generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  username      String?    @unique
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  posts         Post[]
  stars         Star[]
  bookmarks     Bookmark[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id       String  @id @default(uuid())
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String  @unique
  headline String?
  bio      String?
  website  String?
  location String?
}

model Post {
  id        Int        @id @default(autoincrement())
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  title     String
  body      String     @db.VarChar(3000)
  slug      String     @unique
  stars     Star[]
  bookmarks Bookmark[]
  comments  Comment[]
  createdAt DateTime   @default(now())

  @@index([title])
}

model Star {
  id     Int    @id @default(autoincrement())
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
}

model Comment {
  id        Int       @id @default(autoincrement())
  body      String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Comment[] @relation("ParentChild")
  parentId  Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
