// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  username      String?    @unique
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  Profile       Profile?
  Post          Post[]
  Star          Star[]
  Bookmark      Bookmark[]
  Comment       Comment[]
  replies       Reply[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id       String  @id @default(uuid())
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique
  headline String?
  bio      String?
  website  String?
  location String?
}

model Post {
  id        Int        @id @default(autoincrement())
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  title     String     @unique
  body      String
  slug      String     @unique
  stars     Star[]
  bookmarks Bookmark[]
  comments  Comment[]
  createdAt DateTime   @default(now())
  replies   Reply[]

  @@index([title])
}

model Star {
  id     Int    @id @default(autoincrement())
  post   Post   @relation(fields: [postId], references: [id])
  postId Int
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  replies   Reply[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  body      String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  commentId Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
